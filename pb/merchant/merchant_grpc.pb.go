// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: merchant.proto

package merchant

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FianceService_FetchMerchantDetail_FullMethodName  = "/merchant.FianceService/FetchMerchantDetail"
	FianceService_FetchMerchantFinance_FullMethodName = "/merchant.FianceService/FetchMerchantFinance"
)

// FianceServiceClient is the client API for FianceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 金融服务
type FianceServiceClient interface {
	// 获取商户详情
	FetchMerchantDetail(ctx context.Context, in *FianceKeyRequest, opts ...grpc.CallOption) (*FianceKeyRsp, error)
	// 获取商户密钥&打印机
	FetchMerchantFinance(ctx context.Context, in *FianceKeyRequest, opts ...grpc.CallOption) (*FinanceKeyInfo, error)
}

type fianceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFianceServiceClient(cc grpc.ClientConnInterface) FianceServiceClient {
	return &fianceServiceClient{cc}
}

func (c *fianceServiceClient) FetchMerchantDetail(ctx context.Context, in *FianceKeyRequest, opts ...grpc.CallOption) (*FianceKeyRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FianceKeyRsp)
	err := c.cc.Invoke(ctx, FianceService_FetchMerchantDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fianceServiceClient) FetchMerchantFinance(ctx context.Context, in *FianceKeyRequest, opts ...grpc.CallOption) (*FinanceKeyInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinanceKeyInfo)
	err := c.cc.Invoke(ctx, FianceService_FetchMerchantFinance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FianceServiceServer is the server API for FianceService service.
// All implementations must embed UnimplementedFianceServiceServer
// for forward compatibility.
//
// 金融服务
type FianceServiceServer interface {
	// 获取商户详情
	FetchMerchantDetail(context.Context, *FianceKeyRequest) (*FianceKeyRsp, error)
	// 获取商户密钥&打印机
	FetchMerchantFinance(context.Context, *FianceKeyRequest) (*FinanceKeyInfo, error)
	mustEmbedUnimplementedFianceServiceServer()
}

// UnimplementedFianceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFianceServiceServer struct{}

func (UnimplementedFianceServiceServer) FetchMerchantDetail(context.Context, *FianceKeyRequest) (*FianceKeyRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMerchantDetail not implemented")
}
func (UnimplementedFianceServiceServer) FetchMerchantFinance(context.Context, *FianceKeyRequest) (*FinanceKeyInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchMerchantFinance not implemented")
}
func (UnimplementedFianceServiceServer) mustEmbedUnimplementedFianceServiceServer() {}
func (UnimplementedFianceServiceServer) testEmbeddedByValue()                       {}

// UnsafeFianceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FianceServiceServer will
// result in compilation errors.
type UnsafeFianceServiceServer interface {
	mustEmbedUnimplementedFianceServiceServer()
}

func RegisterFianceServiceServer(s grpc.ServiceRegistrar, srv FianceServiceServer) {
	// If the following call pancis, it indicates UnimplementedFianceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FianceService_ServiceDesc, srv)
}

func _FianceService_FetchMerchantDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FianceKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FianceServiceServer).FetchMerchantDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FianceService_FetchMerchantDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FianceServiceServer).FetchMerchantDetail(ctx, req.(*FianceKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FianceService_FetchMerchantFinance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FianceKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FianceServiceServer).FetchMerchantFinance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FianceService_FetchMerchantFinance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FianceServiceServer).FetchMerchantFinance(ctx, req.(*FianceKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FianceService_ServiceDesc is the grpc.ServiceDesc for FianceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FianceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "merchant.FianceService",
	HandlerType: (*FianceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchMerchantDetail",
			Handler:    _FianceService_FetchMerchantDetail_Handler,
		},
		{
			MethodName: "FetchMerchantFinance",
			Handler:    _FianceService_FetchMerchantFinance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant.proto",
}
