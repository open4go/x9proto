// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: merchant.proto

package merchant

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 商业运营模式的枚举类型
type BusinessOperationModel int32

const (
	BusinessOperationModel_COMPANY_OWNED BusinessOperationModel = 0 // 直营模式
	BusinessOperationModel_FRANCHISE     BusinessOperationModel = 1 // 加盟模式
	BusinessOperationModel_LICENSING     BusinessOperationModel = 2 // 特许经营模式
	BusinessOperationModel_AGENCY        BusinessOperationModel = 3 // 代理商模式
	BusinessOperationModel_DISTRIBUTION  BusinessOperationModel = 4 // 分销模式
	BusinessOperationModel_PARTNERSHIP   BusinessOperationModel = 5 // 合作伙伴关系
	BusinessOperationModel_JOINT_VENTURE BusinessOperationModel = 6 // 联营模式
)

// Enum value maps for BusinessOperationModel.
var (
	BusinessOperationModel_name = map[int32]string{
		0: "COMPANY_OWNED",
		1: "FRANCHISE",
		2: "LICENSING",
		3: "AGENCY",
		4: "DISTRIBUTION",
		5: "PARTNERSHIP",
		6: "JOINT_VENTURE",
	}
	BusinessOperationModel_value = map[string]int32{
		"COMPANY_OWNED": 0,
		"FRANCHISE":     1,
		"LICENSING":     2,
		"AGENCY":        3,
		"DISTRIBUTION":  4,
		"PARTNERSHIP":   5,
		"JOINT_VENTURE": 6,
	}
)

func (x BusinessOperationModel) Enum() *BusinessOperationModel {
	p := new(BusinessOperationModel)
	*p = x
	return p
}

func (x BusinessOperationModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BusinessOperationModel) Descriptor() protoreflect.EnumDescriptor {
	return file_merchant_proto_enumTypes[0].Descriptor()
}

func (BusinessOperationModel) Type() protoreflect.EnumType {
	return &file_merchant_proto_enumTypes[0]
}

func (x BusinessOperationModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BusinessOperationModel.Descriptor instead.
func (BusinessOperationModel) EnumDescriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{0}
}

// 门店规模的枚举
type OpenScale int32

const (
	OpenScale_SMALL  OpenScale = 0 // 小型门店
	OpenScale_MEDIUM OpenScale = 1 // 中型门店
	OpenScale_LARGE  OpenScale = 2 // 大型门店
)

// Enum value maps for OpenScale.
var (
	OpenScale_name = map[int32]string{
		0: "SMALL",
		1: "MEDIUM",
		2: "LARGE",
	}
	OpenScale_value = map[string]int32{
		"SMALL":  0,
		"MEDIUM": 1,
		"LARGE":  2,
	}
)

func (x OpenScale) Enum() *OpenScale {
	p := new(OpenScale)
	*p = x
	return p
}

func (x OpenScale) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenScale) Descriptor() protoreflect.EnumDescriptor {
	return file_merchant_proto_enumTypes[1].Descriptor()
}

func (OpenScale) Type() protoreflect.EnumType {
	return &file_merchant_proto_enumTypes[1]
}

func (x OpenScale) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenScale.Descriptor instead.
func (OpenScale) EnumDescriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{1}
}

// 订单信息查请求
type FianceKeyRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MerchantId    string                 `protobuf:"bytes,1,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"` // 订单号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FianceKeyRequest) Reset() {
	*x = FianceKeyRequest{}
	mi := &file_merchant_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FianceKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FianceKeyRequest) ProtoMessage() {}

func (x *FianceKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FianceKeyRequest.ProtoReflect.Descriptor instead.
func (*FianceKeyRequest) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{0}
}

func (x *FianceKeyRequest) GetMerchantId() string {
	if x != nil {
		return x.MerchantId
	}
	return ""
}

// 门店信息模型
type FianceKeyRsp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                           // 门店唯一标识
	Category      string                 `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`                               // 分类/分组
	BestMatch     bool                   `protobuf:"varint,3,opt,name=best_match,json=bestMatch,proto3" json:"best_match,omitempty"`           // 最匹配的门店
	Status        int32                  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                                  // 门店状态
	StoreId       string                 `protobuf:"bytes,5,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`                  // 门店ID
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                       // 门店名称
	Distance      float64                `protobuf:"fixed64,7,opt,name=distance,proto3" json:"distance,omitempty"`                             // 距离
	ShopTime      string                 `protobuf:"bytes,8,opt,name=shop_time,json=shopTime,proto3" json:"shop_time,omitempty"`               // 营业时间
	ShopTimeInfo  *ShopTimeSetting       `protobuf:"bytes,9,opt,name=shop_time_info,json=shopTimeInfo,proto3" json:"shop_time_info,omitempty"` // 门店营业时间
	CallNumber    string                 `protobuf:"bytes,10,opt,name=call_number,json=callNumber,proto3" json:"call_number,omitempty"`        // 门店电话
	Lbs           *LbsInfo               `protobuf:"bytes,11,opt,name=lbs,proto3" json:"lbs,omitempty"`                                        // 地址信息
	Product       []string               `protobuf:"bytes,12,rep,name=product,proto3" json:"product,omitempty"`                                // 当前门店拥有的产品
	TableQrcodes  []*Qrcode              `protobuf:"bytes,13,rep,name=table_qrcodes,json=tableQrcodes,proto3" json:"table_qrcodes,omitempty"`  // 餐桌二维码
	MenuList      []*MenuConfig          `protobuf:"bytes,14,rep,name=menu_list,json=menuList,proto3" json:"menu_list,omitempty"`              // 菜单列表
	Menus         []string               `protobuf:"bytes,15,rep,name=menus,proto3" json:"menus,omitempty"`                                    // 菜单ID列表
	PrinterConf   []*Printer             `protobuf:"bytes,16,rep,name=printer_conf,json=printerConf,proto3" json:"printer_conf,omitempty"`     // 打印机列表
	Finance       *FinanceConfig         `protobuf:"bytes,17,opt,name=finance,proto3" json:"finance,omitempty"`                                // 财务主体
	St            *TypeInfo              `protobuf:"bytes,18,opt,name=st,proto3" json:"st,omitempty"`                                          // 门店类型属性设置
	Seat          []*SeatConfig          `protobuf:"bytes,19,rep,name=seat,proto3" json:"seat,omitempty"`                                      // 座位配置
	Manager       []string               `protobuf:"bytes,20,rep,name=manager,proto3" json:"manager,omitempty"`                                // 当前门店的管理员
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FianceKeyRsp) Reset() {
	*x = FianceKeyRsp{}
	mi := &file_merchant_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FianceKeyRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FianceKeyRsp) ProtoMessage() {}

func (x *FianceKeyRsp) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FianceKeyRsp.ProtoReflect.Descriptor instead.
func (*FianceKeyRsp) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{1}
}

func (x *FianceKeyRsp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FianceKeyRsp) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *FianceKeyRsp) GetBestMatch() bool {
	if x != nil {
		return x.BestMatch
	}
	return false
}

func (x *FianceKeyRsp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FianceKeyRsp) GetStoreId() string {
	if x != nil {
		return x.StoreId
	}
	return ""
}

func (x *FianceKeyRsp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FianceKeyRsp) GetDistance() float64 {
	if x != nil {
		return x.Distance
	}
	return 0
}

func (x *FianceKeyRsp) GetShopTime() string {
	if x != nil {
		return x.ShopTime
	}
	return ""
}

func (x *FianceKeyRsp) GetShopTimeInfo() *ShopTimeSetting {
	if x != nil {
		return x.ShopTimeInfo
	}
	return nil
}

func (x *FianceKeyRsp) GetCallNumber() string {
	if x != nil {
		return x.CallNumber
	}
	return ""
}

func (x *FianceKeyRsp) GetLbs() *LbsInfo {
	if x != nil {
		return x.Lbs
	}
	return nil
}

func (x *FianceKeyRsp) GetProduct() []string {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *FianceKeyRsp) GetTableQrcodes() []*Qrcode {
	if x != nil {
		return x.TableQrcodes
	}
	return nil
}

func (x *FianceKeyRsp) GetMenuList() []*MenuConfig {
	if x != nil {
		return x.MenuList
	}
	return nil
}

func (x *FianceKeyRsp) GetMenus() []string {
	if x != nil {
		return x.Menus
	}
	return nil
}

func (x *FianceKeyRsp) GetPrinterConf() []*Printer {
	if x != nil {
		return x.PrinterConf
	}
	return nil
}

func (x *FianceKeyRsp) GetFinance() *FinanceConfig {
	if x != nil {
		return x.Finance
	}
	return nil
}

func (x *FianceKeyRsp) GetSt() *TypeInfo {
	if x != nil {
		return x.St
	}
	return nil
}

func (x *FianceKeyRsp) GetSeat() []*SeatConfig {
	if x != nil {
		return x.Seat
	}
	return nil
}

func (x *FianceKeyRsp) GetManager() []string {
	if x != nil {
		return x.Manager
	}
	return nil
}

// 财务信息
type FinanceKeyInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           *FinanceConfig         `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`         // 开始时间
	Printer       *Printer               `protobuf:"bytes,2,opt,name=printer,proto3" json:"printer,omitempty"` // 结束时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinanceKeyInfo) Reset() {
	*x = FinanceKeyInfo{}
	mi := &file_merchant_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinanceKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinanceKeyInfo) ProtoMessage() {}

func (x *FinanceKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinanceKeyInfo.ProtoReflect.Descriptor instead.
func (*FinanceKeyInfo) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{2}
}

func (x *FinanceKeyInfo) GetKey() *FinanceConfig {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *FinanceKeyInfo) GetPrinter() *Printer {
	if x != nil {
		return x.Printer
	}
	return nil
}

// 地址信息
type LbsInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                   // 地址
	Longitude     float64                `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`             // 经度
	Latitude      float64                `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`               // 纬度
	AreaName      string                 `protobuf:"bytes,4,opt,name=area_name,json=areaName,proto3" json:"area_name,omitempty"` // 区域名称
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LbsInfo) Reset() {
	*x = LbsInfo{}
	mi := &file_merchant_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LbsInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LbsInfo) ProtoMessage() {}

func (x *LbsInfo) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LbsInfo.ProtoReflect.Descriptor instead.
func (*LbsInfo) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{3}
}

func (x *LbsInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LbsInfo) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *LbsInfo) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LbsInfo) GetAreaName() string {
	if x != nil {
		return x.AreaName
	}
	return ""
}

// 营业时间
type ShopTimeSetting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BeginTime     string                 `protobuf:"bytes,1,opt,name=begin_time,json=beginTime,proto3" json:"begin_time,omitempty"` // 开始时间
	EndTime       string                 `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`       // 结束时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShopTimeSetting) Reset() {
	*x = ShopTimeSetting{}
	mi := &file_merchant_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShopTimeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShopTimeSetting) ProtoMessage() {}

func (x *ShopTimeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShopTimeSetting.ProtoReflect.Descriptor instead.
func (*ShopTimeSetting) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{4}
}

func (x *ShopTimeSetting) GetBeginTime() string {
	if x != nil {
		return x.BeginTime
	}
	return ""
}

func (x *ShopTimeSetting) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

// 门店类型信息
type TypeInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bom           BusinessOperationModel `protobuf:"varint,1,opt,name=bom,proto3,enum=merchant.BusinessOperationModel" json:"bom,omitempty"` // 商业运营模式
	Os            OpenScale              `protobuf:"varint,2,opt,name=os,proto3,enum=merchant.OpenScale" json:"os,omitempty"`                // 门店规模
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TypeInfo) Reset() {
	*x = TypeInfo{}
	mi := &file_merchant_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeInfo) ProtoMessage() {}

func (x *TypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeInfo.ProtoReflect.Descriptor instead.
func (*TypeInfo) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{5}
}

func (x *TypeInfo) GetBom() BusinessOperationModel {
	if x != nil {
		return x.Bom
	}
	return BusinessOperationModel_COMPANY_OWNED
}

func (x *TypeInfo) GetOs() OpenScale {
	if x != nil {
		return x.Os
	}
	return OpenScale_SMALL
}

// 财务配置
type FinanceConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WxPay         string                 `protobuf:"bytes,1,opt,name=wx_pay,json=wxPay,proto3" json:"wx_pay,omitempty"`       // 微信支付
	BankPay       string                 `protobuf:"bytes,2,opt,name=bank_pay,json=bankPay,proto3" json:"bank_pay,omitempty"` // 银行支付
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FinanceConfig) Reset() {
	*x = FinanceConfig{}
	mi := &file_merchant_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FinanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinanceConfig) ProtoMessage() {}

func (x *FinanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinanceConfig.ProtoReflect.Descriptor instead.
func (*FinanceConfig) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{6}
}

func (x *FinanceConfig) GetWxPay() string {
	if x != nil {
		return x.WxPay
	}
	return ""
}

func (x *FinanceConfig) GetBankPay() string {
	if x != nil {
		return x.BankPay
	}
	return ""
}

// 菜单配置
type MenuConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Sales         int32                  `protobuf:"varint,1,opt,name=sales,proto3" json:"sales,omitempty"`                // 销量
	Stock         int32                  `protobuf:"varint,2,opt,name=stock,proto3" json:"stock,omitempty"`                // 库存
	MenuId        string                 `protobuf:"bytes,3,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"` // 菜单ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MenuConfig) Reset() {
	*x = MenuConfig{}
	mi := &file_merchant_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MenuConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MenuConfig) ProtoMessage() {}

func (x *MenuConfig) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MenuConfig.ProtoReflect.Descriptor instead.
func (*MenuConfig) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{7}
}

func (x *MenuConfig) GetSales() int32 {
	if x != nil {
		return x.Sales
	}
	return 0
}

func (x *MenuConfig) GetStock() int32 {
	if x != nil {
		return x.Stock
	}
	return 0
}

func (x *MenuConfig) GetMenuId() string {
	if x != nil {
		return x.MenuId
	}
	return ""
}

// 打印机配置
type Printer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Remark        string                 `protobuf:"bytes,1,opt,name=remark,proto3" json:"remark,omitempty"`                        // 备注
	PrinterId     string                 `protobuf:"bytes,2,opt,name=printer_id,json=printerId,proto3" json:"printer_id,omitempty"` // 打印机ID
	TplId         string                 `protobuf:"bytes,3,opt,name=tpl_id,json=tplId,proto3" json:"tpl_id,omitempty"`             // 模板ID
	Enabled       bool                   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`                     // 是否启用
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Printer) Reset() {
	*x = Printer{}
	mi := &file_merchant_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Printer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Printer) ProtoMessage() {}

func (x *Printer) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Printer.ProtoReflect.Descriptor instead.
func (*Printer) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{8}
}

func (x *Printer) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Printer) GetPrinterId() string {
	if x != nil {
		return x.PrinterId
	}
	return ""
}

func (x *Printer) GetTplId() string {
	if x != nil {
		return x.TplId
	}
	return ""
}

func (x *Printer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// 座位配置
type SeatConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`             // 名称
	Id            string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`                 // ID
	Type          string                 `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`             // 类型
	Background    string                 `protobuf:"bytes,5,opt,name=background,proto3" json:"background,omitempty"` // 背景图
	Rate          string                 `protobuf:"bytes,6,opt,name=rate,proto3" json:"rate,omitempty"`             // 使用率
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SeatConfig) Reset() {
	*x = SeatConfig{}
	mi := &file_merchant_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SeatConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SeatConfig) ProtoMessage() {}

func (x *SeatConfig) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SeatConfig.ProtoReflect.Descriptor instead.
func (*SeatConfig) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{9}
}

func (x *SeatConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SeatConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SeatConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SeatConfig) GetBackground() string {
	if x != nil {
		return x.Background
	}
	return ""
}

func (x *SeatConfig) GetRate() string {
	if x != nil {
		return x.Rate
	}
	return ""
}

// 二维码信息
type Qrcode struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"` // 二维码内容
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"` // 二维码类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Qrcode) Reset() {
	*x = Qrcode{}
	mi := &file_merchant_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Qrcode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Qrcode) ProtoMessage() {}

func (x *Qrcode) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Qrcode.ProtoReflect.Descriptor instead.
func (*Qrcode) Descriptor() ([]byte, []int) {
	return file_merchant_proto_rawDescGZIP(), []int{10}
}

func (x *Qrcode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Qrcode) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

var File_merchant_proto protoreflect.FileDescriptor

var file_merchant_proto_rawDesc = string([]byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x10, 0x46, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xcb, 0x05, 0x0a, 0x0c, 0x46, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x73, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a,
	0x62, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x62, 0x65, 0x73, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x68, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x53,
	0x68, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c,
	0x73, 0x68, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x23, 0x0a,
	0x03, 0x6c, 0x62, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x4c, 0x62, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x6c,
	0x62, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x0d,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x51,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x51, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x08, 0x6d, 0x65,
	0x6e, 0x75, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0c,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x72,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x31, 0x0a, 0x07, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x02, 0x73, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x02, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x65, 0x61,
	0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x73,
	0x65, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x22, 0x68, 0x0a,
	0x0e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x29, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x7a, 0x0a, 0x07, 0x4c, 0x62, 0x73, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x72, 0x65, 0x61, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x63, 0x0a, 0x08, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x03,
	0x62, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x2e, 0x42, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x03, 0x62, 0x6f, 0x6d,
	0x12, 0x23, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x52, 0x02, 0x6f, 0x73, 0x22, 0x41, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x77, 0x78, 0x5f, 0x70, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x78, 0x50, 0x61, 0x79, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x6e, 0x6b, 0x50, 0x61, 0x79, 0x22, 0x51, 0x0a, 0x0a, 0x4d, 0x65, 0x6e, 0x75,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6e, 0x75, 0x49, 0x64, 0x22, 0x71, 0x0a, 0x07, 0x50,
	0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x74, 0x70, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x70, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x78,
	0x0a, 0x0a, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x22, 0x30, 0x0a, 0x06, 0x51, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x8b, 0x01, 0x0a, 0x16, 0x42,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x4e, 0x59,
	0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x41, 0x4e,
	0x43, 0x48, 0x49, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x43, 0x45, 0x4e,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x47, 0x45, 0x4e, 0x43, 0x59,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x53,
	0x48, 0x49, 0x50, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x56,
	0x45, 0x4e, 0x54, 0x55, 0x52, 0x45, 0x10, 0x06, 0x2a, 0x2d, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x41, 0x52, 0x47, 0x45, 0x10, 0x02, 0x32, 0xa8, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x13, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x14, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x6d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x2f, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_merchant_proto_rawDescOnce sync.Once
	file_merchant_proto_rawDescData []byte
)

func file_merchant_proto_rawDescGZIP() []byte {
	file_merchant_proto_rawDescOnce.Do(func() {
		file_merchant_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_merchant_proto_rawDesc), len(file_merchant_proto_rawDesc)))
	})
	return file_merchant_proto_rawDescData
}

var file_merchant_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_merchant_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_merchant_proto_goTypes = []any{
	(BusinessOperationModel)(0), // 0: merchant.BusinessOperationModel
	(OpenScale)(0),              // 1: merchant.OpenScale
	(*FianceKeyRequest)(nil),    // 2: merchant.FianceKeyRequest
	(*FianceKeyRsp)(nil),        // 3: merchant.FianceKeyRsp
	(*FinanceKeyInfo)(nil),      // 4: merchant.FinanceKeyInfo
	(*LbsInfo)(nil),             // 5: merchant.LbsInfo
	(*ShopTimeSetting)(nil),     // 6: merchant.ShopTimeSetting
	(*TypeInfo)(nil),            // 7: merchant.TypeInfo
	(*FinanceConfig)(nil),       // 8: merchant.FinanceConfig
	(*MenuConfig)(nil),          // 9: merchant.MenuConfig
	(*Printer)(nil),             // 10: merchant.Printer
	(*SeatConfig)(nil),          // 11: merchant.SeatConfig
	(*Qrcode)(nil),              // 12: merchant.Qrcode
}
var file_merchant_proto_depIdxs = []int32{
	6,  // 0: merchant.FianceKeyRsp.shop_time_info:type_name -> merchant.ShopTimeSetting
	5,  // 1: merchant.FianceKeyRsp.lbs:type_name -> merchant.LbsInfo
	12, // 2: merchant.FianceKeyRsp.table_qrcodes:type_name -> merchant.Qrcode
	9,  // 3: merchant.FianceKeyRsp.menu_list:type_name -> merchant.MenuConfig
	10, // 4: merchant.FianceKeyRsp.printer_conf:type_name -> merchant.Printer
	8,  // 5: merchant.FianceKeyRsp.finance:type_name -> merchant.FinanceConfig
	7,  // 6: merchant.FianceKeyRsp.st:type_name -> merchant.TypeInfo
	11, // 7: merchant.FianceKeyRsp.seat:type_name -> merchant.SeatConfig
	8,  // 8: merchant.FinanceKeyInfo.key:type_name -> merchant.FinanceConfig
	10, // 9: merchant.FinanceKeyInfo.printer:type_name -> merchant.Printer
	0,  // 10: merchant.TypeInfo.bom:type_name -> merchant.BusinessOperationModel
	1,  // 11: merchant.TypeInfo.os:type_name -> merchant.OpenScale
	2,  // 12: merchant.FianceService.FetchMerchantDetail:input_type -> merchant.FianceKeyRequest
	2,  // 13: merchant.FianceService.FetchMerchantFinance:input_type -> merchant.FianceKeyRequest
	3,  // 14: merchant.FianceService.FetchMerchantDetail:output_type -> merchant.FianceKeyRsp
	4,  // 15: merchant.FianceService.FetchMerchantFinance:output_type -> merchant.FinanceKeyInfo
	14, // [14:16] is the sub-list for method output_type
	12, // [12:14] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_merchant_proto_init() }
func file_merchant_proto_init() {
	if File_merchant_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_merchant_proto_rawDesc), len(file_merchant_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_merchant_proto_goTypes,
		DependencyIndexes: file_merchant_proto_depIdxs,
		EnumInfos:         file_merchant_proto_enumTypes,
		MessageInfos:      file_merchant_proto_msgTypes,
	}.Build()
	File_merchant_proto = out.File
	file_merchant_proto_goTypes = nil
	file_merchant_proto_depIdxs = nil
}
