// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: payment_info.proto

package payment_info

import (
	cst "./cst"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrepareTrade struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Define fields for PrepareTrade if necessary
	// For example:
	Noncestr      string `protobuf:"bytes,1,opt,name=noncestr,proto3" json:"noncestr,omitempty"`
	Package       string `protobuf:"bytes,2,opt,name=package,proto3" json:"package,omitempty"`
	Timestamp     string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Sign          string `protobuf:"bytes,4,opt,name=sign,proto3" json:"sign,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrepareTrade) Reset() {
	*x = PrepareTrade{}
	mi := &file_payment_info_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareTrade) ProtoMessage() {}

func (x *PrepareTrade) ProtoReflect() protoreflect.Message {
	mi := &file_payment_info_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareTrade.ProtoReflect.Descriptor instead.
func (*PrepareTrade) Descriptor() ([]byte, []int) {
	return file_payment_info_proto_rawDescGZIP(), []int{0}
}

func (x *PrepareTrade) GetNoncestr() string {
	if x != nil {
		return x.Noncestr
	}
	return ""
}

func (x *PrepareTrade) GetPackage() string {
	if x != nil {
		return x.Package
	}
	return ""
}

func (x *PrepareTrade) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *PrepareTrade) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

type PayInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PreTrade: A nested message for PrepareTrade
	PrepareTrade *PrepareTrade `protobuf:"bytes,1,opt,name=prepare_trade,json=prepareTrade,proto3" json:"prepare_trade,omitempty"`
	// Amount: Display amount as string
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// PayAmount: Payment amount in cents
	PayAmount int64 `protobuf:"varint,3,opt,name=pay_amount,json=payAmount,proto3" json:"pay_amount,omitempty"`
	// TransactionID: The third-party payment transaction ID
	TransactionId string `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// PayAt: Payment time (Unix timestamp)
	PayAt int32 `protobuf:"varint,5,opt,name=pay_at,json=payAt,proto3" json:"pay_at,omitempty"`
	// PayedAt: Payment successful time (Unix timestamp)
	PayedAt int32 `protobuf:"varint,6,opt,name=payed_at,json=payedAt,proto3" json:"payed_at,omitempty"`
	// RefundedAt: Refund successful time (Unix timestamp)
	RefundedAt int32 `protobuf:"varint,7,opt,name=refunded_at,json=refundedAt,proto3" json:"refunded_at,omitempty"`
	// Channel: The payment channel, defined as cst.ChannelType
	Channel cst.ChannelType `protobuf:"varint,8,opt,name=channel,proto3,enum=cst.ChannelType" json:"channel,omitempty"`
	// Method: The payment method, defined as cst.PayMethod
	Method cst.PayMethod `protobuf:"varint,9,opt,name=method,proto3,enum=cst.PayMethod" json:"method,omitempty"`
	// Status: The payment status, defined as cst.PayStatus
	Status        cst.PayStatus `protobuf:"varint,10,opt,name=status,proto3,enum=cst.PayStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PayInfo) Reset() {
	*x = PayInfo{}
	mi := &file_payment_info_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayInfo) ProtoMessage() {}

func (x *PayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_payment_info_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayInfo.ProtoReflect.Descriptor instead.
func (*PayInfo) Descriptor() ([]byte, []int) {
	return file_payment_info_proto_rawDescGZIP(), []int{1}
}

func (x *PayInfo) GetPrepareTrade() *PrepareTrade {
	if x != nil {
		return x.PrepareTrade
	}
	return nil
}

func (x *PayInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PayInfo) GetPayAmount() int64 {
	if x != nil {
		return x.PayAmount
	}
	return 0
}

func (x *PayInfo) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *PayInfo) GetPayAt() int32 {
	if x != nil {
		return x.PayAt
	}
	return 0
}

func (x *PayInfo) GetPayedAt() int32 {
	if x != nil {
		return x.PayedAt
	}
	return 0
}

func (x *PayInfo) GetRefundedAt() int32 {
	if x != nil {
		return x.RefundedAt
	}
	return 0
}

func (x *PayInfo) GetChannel() cst.ChannelType {
	if x != nil {
		return x.Channel
	}
	return cst.ChannelType(0)
}

func (x *PayInfo) GetMethod() cst.PayMethod {
	if x != nil {
		return x.Method
	}
	return cst.PayMethod(0)
}

func (x *PayInfo) GetStatus() cst.PayStatus {
	if x != nil {
		return x.Status
	}
	return cst.PayStatus(0)
}

var File_payment_info_proto protoreflect.FileDescriptor

var file_payment_info_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x1a, 0x09, 0x63, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x76, 0x0a,
	0x0c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0xf7, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x79, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x70, 0x61, 0x79, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x61, 0x79, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x79, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x63, 0x73, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x26, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x63, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x73, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x10, 0x5a, 0x0e, 0x2e, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_payment_info_proto_rawDescOnce sync.Once
	file_payment_info_proto_rawDescData []byte
)

func file_payment_info_proto_rawDescGZIP() []byte {
	file_payment_info_proto_rawDescOnce.Do(func() {
		file_payment_info_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_payment_info_proto_rawDesc), len(file_payment_info_proto_rawDesc)))
	})
	return file_payment_info_proto_rawDescData
}

var file_payment_info_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_payment_info_proto_goTypes = []any{
	(*PrepareTrade)(nil), // 0: payment_info.PrepareTrade
	(*PayInfo)(nil),      // 1: payment_info.PayInfo
	(cst.ChannelType)(0), // 2: cst.ChannelType
	(cst.PayMethod)(0),   // 3: cst.PayMethod
	(cst.PayStatus)(0),   // 4: cst.PayStatus
}
var file_payment_info_proto_depIdxs = []int32{
	0, // 0: payment_info.PayInfo.prepare_trade:type_name -> payment_info.PrepareTrade
	2, // 1: payment_info.PayInfo.channel:type_name -> cst.ChannelType
	3, // 2: payment_info.PayInfo.method:type_name -> cst.PayMethod
	4, // 3: payment_info.PayInfo.status:type_name -> cst.PayStatus
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_payment_info_proto_init() }
func file_payment_info_proto_init() {
	if File_payment_info_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_payment_info_proto_rawDesc), len(file_payment_info_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_payment_info_proto_goTypes,
		DependencyIndexes: file_payment_info_proto_depIdxs,
		MessageInfos:      file_payment_info_proto_msgTypes,
	}.Build()
	File_payment_info_proto = out.File
	file_payment_info_proto_goTypes = nil
	file_payment_info_proto_depIdxs = nil
}
