// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: wxpay.proto

package wxpay

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 定义请求消息结构
type WxPayQueryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Appid         string                 `protobuf:"bytes,1,opt,name=appid,proto3" json:"appid,omitempty"`                                      // 公众账号ID
	MchId         string                 `protobuf:"bytes,2,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`                         // 商户号
	NonceStr      string                 `protobuf:"bytes,3,opt,name=nonce_str,json=nonceStr,proto3" json:"nonce_str,omitempty"`                // 随机字符串
	TransactionId string                 `protobuf:"bytes,4,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // 微信支付订单号
	Sign          string                 `protobuf:"bytes,5,opt,name=sign,proto3" json:"sign,omitempty"`                                        // 签名
	AppSecret     string                 `protobuf:"bytes,6,opt,name=app_secret,json=appSecret,proto3" json:"app_secret,omitempty"`             // 密钥
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WxPayQueryRequest) Reset() {
	*x = WxPayQueryRequest{}
	mi := &file_wxpay_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WxPayQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxPayQueryRequest) ProtoMessage() {}

func (x *WxPayQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wxpay_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxPayQueryRequest.ProtoReflect.Descriptor instead.
func (*WxPayQueryRequest) Descriptor() ([]byte, []int) {
	return file_wxpay_proto_rawDescGZIP(), []int{0}
}

func (x *WxPayQueryRequest) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *WxPayQueryRequest) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *WxPayQueryRequest) GetNonceStr() string {
	if x != nil {
		return x.NonceStr
	}
	return ""
}

func (x *WxPayQueryRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *WxPayQueryRequest) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *WxPayQueryRequest) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

// 定义响应消息结构
type WxPayQueryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReturnCode    string                 `protobuf:"bytes,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`           // 返回状态
	ReturnMsg     string                 `protobuf:"bytes,2,opt,name=return_msg,json=returnMsg,proto3" json:"return_msg,omitempty"`              // 返回信息
	Appid         string                 `protobuf:"bytes,3,opt,name=appid,proto3" json:"appid,omitempty"`                                       // 公众账号ID
	MchId         string                 `protobuf:"bytes,4,opt,name=mch_id,json=mchId,proto3" json:"mch_id,omitempty"`                          // 商户号
	DeviceInfo    string                 `protobuf:"bytes,5,opt,name=device_info,json=deviceInfo,proto3" json:"device_info,omitempty"`           // 设备号
	NonceStr      string                 `protobuf:"bytes,6,opt,name=nonce_str,json=nonceStr,proto3" json:"nonce_str,omitempty"`                 // 随机字符串
	Sign          string                 `protobuf:"bytes,7,opt,name=sign,proto3" json:"sign,omitempty"`                                         // 签名
	ResultCode    string                 `protobuf:"bytes,8,opt,name=result_code,json=resultCode,proto3" json:"result_code,omitempty"`           // 业务结果
	Openid        string                 `protobuf:"bytes,9,opt,name=openid,proto3" json:"openid,omitempty"`                                     // 用户标识
	IsSubscribe   string                 `protobuf:"bytes,10,opt,name=is_subscribe,json=isSubscribe,proto3" json:"is_subscribe,omitempty"`       // 用户是否关注
	TradeType     string                 `protobuf:"bytes,11,opt,name=trade_type,json=tradeType,proto3" json:"trade_type,omitempty"`             // 交易类型
	BankType      string                 `protobuf:"bytes,12,opt,name=bank_type,json=bankType,proto3" json:"bank_type,omitempty"`                // 银行类型
	TotalFee      int32                  `protobuf:"varint,13,opt,name=total_fee,json=totalFee,proto3" json:"total_fee,omitempty"`               // 总金额
	FeeType       string                 `protobuf:"bytes,14,opt,name=fee_type,json=feeType,proto3" json:"fee_type,omitempty"`                   // 货币类型
	TransactionId string                 `protobuf:"bytes,15,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // 微信支付订单号
	OutTradeNo    string                 `protobuf:"bytes,16,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`        // 商户订单号
	Attach        string                 `protobuf:"bytes,17,opt,name=attach,proto3" json:"attach,omitempty"`                                    // 附加数据
	TimeEnd       string                 `protobuf:"bytes,18,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`                   // 交易完成时间
	TradeState    string                 `protobuf:"bytes,19,opt,name=trade_state,json=tradeState,proto3" json:"trade_state,omitempty"`          // 交易状态
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WxPayQueryResponse) Reset() {
	*x = WxPayQueryResponse{}
	mi := &file_wxpay_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WxPayQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxPayQueryResponse) ProtoMessage() {}

func (x *WxPayQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wxpay_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxPayQueryResponse.ProtoReflect.Descriptor instead.
func (*WxPayQueryResponse) Descriptor() ([]byte, []int) {
	return file_wxpay_proto_rawDescGZIP(), []int{1}
}

func (x *WxPayQueryResponse) GetReturnCode() string {
	if x != nil {
		return x.ReturnCode
	}
	return ""
}

func (x *WxPayQueryResponse) GetReturnMsg() string {
	if x != nil {
		return x.ReturnMsg
	}
	return ""
}

func (x *WxPayQueryResponse) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *WxPayQueryResponse) GetMchId() string {
	if x != nil {
		return x.MchId
	}
	return ""
}

func (x *WxPayQueryResponse) GetDeviceInfo() string {
	if x != nil {
		return x.DeviceInfo
	}
	return ""
}

func (x *WxPayQueryResponse) GetNonceStr() string {
	if x != nil {
		return x.NonceStr
	}
	return ""
}

func (x *WxPayQueryResponse) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

func (x *WxPayQueryResponse) GetResultCode() string {
	if x != nil {
		return x.ResultCode
	}
	return ""
}

func (x *WxPayQueryResponse) GetOpenid() string {
	if x != nil {
		return x.Openid
	}
	return ""
}

func (x *WxPayQueryResponse) GetIsSubscribe() string {
	if x != nil {
		return x.IsSubscribe
	}
	return ""
}

func (x *WxPayQueryResponse) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

func (x *WxPayQueryResponse) GetBankType() string {
	if x != nil {
		return x.BankType
	}
	return ""
}

func (x *WxPayQueryResponse) GetTotalFee() int32 {
	if x != nil {
		return x.TotalFee
	}
	return 0
}

func (x *WxPayQueryResponse) GetFeeType() string {
	if x != nil {
		return x.FeeType
	}
	return ""
}

func (x *WxPayQueryResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *WxPayQueryResponse) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *WxPayQueryResponse) GetAttach() string {
	if x != nil {
		return x.Attach
	}
	return ""
}

func (x *WxPayQueryResponse) GetTimeEnd() string {
	if x != nil {
		return x.TimeEnd
	}
	return ""
}

func (x *WxPayQueryResponse) GetTradeState() string {
	if x != nil {
		return x.TradeState
	}
	return ""
}

var File_wxpay_proto protoreflect.FileDescriptor

var file_wxpay_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x77, 0x78, 0x70, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x77,
	0x78, 0x70, 0x61, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x57, 0x78, 0x50, 0x61, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x53, 0x74, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0xc0,
	0x04, 0x0a, 0x12, 0x57, 0x78, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x63, 0x68,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x32, 0x58, 0x0a, 0x0c, 0x57, 0x78, 0x50, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x48, 0x0a, 0x11, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e, 0x77, 0x78, 0x70, 0x61, 0x79, 0x2e, 0x57,
	0x78, 0x50, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x77, 0x78, 0x70, 0x61, 0x79, 0x2e, 0x57, 0x78, 0x50, 0x61, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e,
	0x2f, 0x77, 0x78, 0x70, 0x61, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_wxpay_proto_rawDescOnce sync.Once
	file_wxpay_proto_rawDescData []byte
)

func file_wxpay_proto_rawDescGZIP() []byte {
	file_wxpay_proto_rawDescOnce.Do(func() {
		file_wxpay_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wxpay_proto_rawDesc), len(file_wxpay_proto_rawDesc)))
	})
	return file_wxpay_proto_rawDescData
}

var file_wxpay_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_wxpay_proto_goTypes = []any{
	(*WxPayQueryRequest)(nil),  // 0: wxpay.WxPayQueryRequest
	(*WxPayQueryResponse)(nil), // 1: wxpay.WxPayQueryResponse
}
var file_wxpay_proto_depIdxs = []int32{
	0, // 0: wxpay.WxPayService.FetchOrderPayInfo:input_type -> wxpay.WxPayQueryRequest
	1, // 1: wxpay.WxPayService.FetchOrderPayInfo:output_type -> wxpay.WxPayQueryResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_wxpay_proto_init() }
func file_wxpay_proto_init() {
	if File_wxpay_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wxpay_proto_rawDesc), len(file_wxpay_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_wxpay_proto_goTypes,
		DependencyIndexes: file_wxpay_proto_depIdxs,
		MessageInfos:      file_wxpay_proto_msgTypes,
	}.Build()
	File_wxpay_proto = out.File
	file_wxpay_proto_goTypes = nil
	file_wxpay_proto_depIdxs = nil
}
